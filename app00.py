# -*- coding: utf-8 -*-
"""App00.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1df7yn5bXtv4U5UQhmw5oDA-3VjCi1VH2
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import folium
from scipy.spatial.distance import euclidean
from sklearn.cluster import KMeans

def cargar_datos(archivo):
    return pd.read_csv(archivo)

def correlacion_edad_ingreso(df):
    sns.lmplot(x='Edad', y='Ingreso_Anual', data=df)
    plt.title('Correlación entre Edad e Ingreso Anual')
    plt.show()

def correlacion_segmentada(df, segmento):
    sns.lmplot(x='Edad', y='Ingreso_Anual', hue=segmento, data=df)
    plt.title(f'Correlación entre Edad e Ingreso Anual segmentado por {segmento}')
    plt.show()

def mapa_ubicacion(df, filtro=None):
    mapa = folium.Map(location=[df['Latitud'].mean(), df['Longitud'].mean()], zoom_start=5)
    if filtro:
        df = df[df[filtro[0]].between(filtro[1], filtro[2])]
    for _, row in df.iterrows():
        folium.Marker([row['Latitud'], row['Longitud']], popup=row['Nombre']).add_to(mapa)
    return mapa

def clustering_frecuencia(df, n_clusters=3):
    kmeans = KMeans(n_clusters=n_clusters)
    df['Cluster'] = kmeans.fit_predict(df[['Frecuencia_Compra']])
    sns.scatterplot(x='Edad', y='Ingreso_Anual', hue='Cluster', data=df, palette='viridis')
    plt.title('Clúster de clientes según frecuencia de compra')
    plt.show()

def grafico_barras(df):
    df.groupby(['Genero', 'Frecuencia_Compra']).size().unstack().plot(kind='bar', stacked=True)
    plt.title('Distribución de clientes por Género y Frecuencia de Compra')
    plt.show()

def mapa_calor_ingresos(df):
    pivot = df.pivot_table(values='Ingreso_Anual', index='Latitud', columns='Longitud')
    sns.heatmap(pivot, cmap='coolwarm')
    plt.title('Mapa de calor de Ingresos')
    plt.show()

def calcular_distancias(df):
    top_ingresos = df.nlargest(5, 'Ingreso_Anual')
    distancias = {(row1['Nombre'], row2['Nombre']): euclidean((row1['Latitud'], row1['Longitud']), 
                                                              (row2['Latitud'], row2['Longitud']))
                  for _, row1 in top_ingresos.iterrows() for _, row2 in top_ingresos.iterrows() if row1['Nombre'] != row2['Nombre']}
    return distancias

if __name__ == "__main__":
    df = cargar_datos('analisis_clientes.csv')
    correlacion_edad_ingreso(df)
    correlacion_segmentada(df, 'Genero')
    mapa_ubicacion(df).save('mapa_general.html')
    clustering_frecuencia(df)
    grafico_barras(df)
    mapa_calor_ingresos(df)
    print(calcular_distancias(df))
